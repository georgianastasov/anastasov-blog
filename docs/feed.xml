<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2021-10-08T12:22:01+03:00</updated><id>/feed.xml</id><title type="html">My blog</title><subtitle>hi</subtitle><entry><title type="html">Grid introduction</title><link href="/grid-introduction" rel="alternate" type="text/html" title="Grid introduction" /><published>2021-09-20T00:00:00+03:00</published><updated>2021-09-20T00:00:00+03:00</updated><id>/grid-introduction</id><content type="html" xml:base="/grid-introduction">&lt;section class=&quot;wrapper&quot;&gt;
    &lt;p&gt;CSS Grid Layout (aka “Grid” or “CSS Grid”), is a two-dimensional grid-based layout system that, compared to any web layout system of the past, completely changes the way we design user interfaces. CSS has always been used to layout our web pages, but it’s never done a very good job of it.&lt;/p&gt;
    &lt;br&gt;
    &lt;p&gt;First, we used tables, then floats, positioning and inline-block, but all of these methods were essentially hacks and left out a lot of important functionality (vertical centering, for instance). &lt;a href=&quot;/flex-box-hacks&quot;&gt;Flexbox&lt;/a&gt; is also a very great layout tool, but its one-directional flow has different use cases — and they actually work together quite well! Grid is the very first CSS module created specifically to solve the layout problems we’ve all been hacking our way around for as long as we’ve been making websites.&lt;/p&gt;
    &lt;br&gt;
    &lt;p&gt;The intention of this guide is to present the Grid concepts as they exist in the latest version of the specification. So I won’t be covering the out-of-date Internet Explorer syntax (even though you can absolutely use Grid in IE 11) or other historical hacks.&lt;/p&gt;
&lt;/section&gt;</content><author><name></name></author><summary type="html">CSS Grid Layout (aka “Grid” or “CSS Grid”), is a two-dimensional grid-based layout system that, compared to any web layout system of the past, completely changes the way we design user interfaces. CSS has always been used to layout our web pages, but it’s never done a very good job of it. First, we used tables, then floats, positioning and inline-block, but all of these methods were essentially hacks and left out a lot of important functionality (vertical centering, for instance). Flexbox is also a very great layout tool, but its one-directional flow has different use cases — and they actually work together quite well! Grid is the very first CSS module created specifically to solve the layout problems we’ve all been hacking our way around for as long as we’ve been making websites. The intention of this guide is to present the Grid concepts as they exist in the latest version of the specification. So I won’t be covering the out-of-date Internet Explorer syntax (even though you can absolutely use Grid in IE 11) or other historical hacks.</summary></entry><entry><title type="html">Css tricks and tips</title><link href="/css-tricks-and-tips" rel="alternate" type="text/html" title="Css tricks and tips" /><published>2021-09-11T00:00:00+03:00</published><updated>2021-09-11T00:00:00+03:00</updated><id>/css-tricks-and-tips</id><content type="html" xml:base="/css-tricks-and-tips">&lt;section class=&quot;wrapper&quot;&gt;
    &lt;h1 class=&quot;title&quot;&gt;Css tricks and tips&lt;/h1&gt;
    &lt;p class=&quot;author&quot;&gt;By Georgi Anastasov Sep 11, 2021&lt;/p&gt;
    &lt;br&gt;
    &lt;p&gt;Learning new CSS tricks is one of the best ways to shake up your website design. If you&apos;ve been working in the web industry for a while, you may feel you&apos;re always coding or designing the same layouts. Trends come and go but the majority of sites look the same – using the 12-column grid, two and three-column boxed layouts and similar shapes. Not only is it getting a little boring to look at, but the user experience isn&apos;t that great.&lt;/p&gt;
    &lt;br&gt;
    &lt;p&gt;One way to change it up is to draw inspiration from fields or areas that go beyond digital design. Why not use print or editorial designs for your website? You can break old habits with new CSS properties that open a new world of possibilities. You can utilise a decent website builder to inspire you.&lt;/p&gt;
    &lt;br&gt;
    &lt;p&gt;If you&apos;d like more web design advice, see our guide to the perfect website layout, or brush up on Atomic Design. Plus, here are the user experience tips you need to know.&lt;/p&gt;
    &lt;a href=&quot;https://www.creativebloq.com/features/best-web-design-tools&quot;&gt;30 web design tools to speed up your workflow in 2020&lt;/a&gt;
    &lt;br&gt;
    &lt;br&gt;
    &lt;p&gt;A CSS revolution is underway – tools like &lt;a href=&quot;/flex-box-hacks&quot;&gt;Flexbox&lt;/a&gt; or CSS Grid offer easy ways to build interesting layouts. Using CSS, you can create in visual styles that go way beyond the ones you may be familiar with.&lt;/p&gt;
    &lt;p&gt;In this article, we&apos;ll share some CSS tips that will help you break the mould in your website layouts, with just a couple of lines of code.&lt;/p&gt;
&lt;/section&gt;</content><author><name></name></author><summary type="html">Css tricks and tips By Georgi Anastasov Sep 11, 2021 Learning new CSS tricks is one of the best ways to shake up your website design. If you&apos;ve been working in the web industry for a while, you may feel you&apos;re always coding or designing the same layouts. Trends come and go but the majority of sites look the same – using the 12-column grid, two and three-column boxed layouts and similar shapes. Not only is it getting a little boring to look at, but the user experience isn&apos;t that great. One way to change it up is to draw inspiration from fields or areas that go beyond digital design. Why not use print or editorial designs for your website? You can break old habits with new CSS properties that open a new world of possibilities. You can utilise a decent website builder to inspire you. If you&apos;d like more web design advice, see our guide to the perfect website layout, or brush up on Atomic Design. Plus, here are the user experience tips you need to know. 30 web design tools to speed up your workflow in 2020 A CSS revolution is underway – tools like Flexbox or CSS Grid offer easy ways to build interesting layouts. Using CSS, you can create in visual styles that go way beyond the ones you may be familiar with. In this article, we&apos;ll share some CSS tips that will help you break the mould in your website layouts, with just a couple of lines of code.</summary></entry><entry><title type="html">Did you know this?</title><link href="/did-you-know-this" rel="alternate" type="text/html" title="Did you know this?" /><published>2021-09-08T00:00:00+03:00</published><updated>2021-09-08T00:00:00+03:00</updated><id>/did-you-know-this</id><content type="html" xml:base="/did-you-know-this">&lt;section class=&quot;wrapper&quot;&gt;
    &lt;h1 class=&quot;title&quot;&gt;Did you know this?&lt;/h1&gt;
    &lt;p class=&quot;author&quot;&gt;By Georgi Anastasov Sep 08, 2021&lt;/p&gt;
    &lt;br&gt;
    &lt;p&gt;I believe this is the most famous CSS meme out there, followed by the &quot;css family guy&quot; meme. You might have seen this somewhere, in a T-shirt, a mug or a sticker, and everybody can relate to it because it represents the frustration when trying to do a very basic thing in CSS and it doesn’t work properly, but what people don&apos;t realize is that the &quot;CSS is awesome&quot; meme is actually a feature, not a bug!&lt;/p&gt;
    &lt;br&gt;
    &lt;p&gt;If you had a design software that couldn&apos;t to text overflowing a box, you&apos;d be creatively limited and pissed off. CSS Tricks has a big post on the &quot;CSS is awesome&quot; meme if you want to learn more, but this happens basically due to 3 things&lt;/p&gt;
    &lt;br&gt;
    &lt;ul&gt;
        &lt;li&gt;The content doesn&apos;t fit into its container&lt;/li&gt;
        &lt;li&gt;The container can&apos;t expand to fit the content&lt;/li&gt;
        &lt;li&gt;The overflow CSS property has its default to visible.&lt;/li&gt;
    &lt;/ul&gt;
&lt;/section&gt;</content><author><name></name></author><summary type="html">Did you know this? By Georgi Anastasov Sep 08, 2021 I believe this is the most famous CSS meme out there, followed by the &quot;css family guy&quot; meme. You might have seen this somewhere, in a T-shirt, a mug or a sticker, and everybody can relate to it because it represents the frustration when trying to do a very basic thing in CSS and it doesn’t work properly, but what people don&apos;t realize is that the &quot;CSS is awesome&quot; meme is actually a feature, not a bug! If you had a design software that couldn&apos;t to text overflowing a box, you&apos;d be creatively limited and pissed off. CSS Tricks has a big post on the &quot;CSS is awesome&quot; meme if you want to learn more, but this happens basically due to 3 things The content doesn&apos;t fit into its container The container can&apos;t expand to fit the content The overflow CSS property has its default to visible.</summary></entry><entry><title type="html">Flexbox hacks</title><link href="/flex-box-hacks" rel="alternate" type="text/html" title="Flexbox hacks" /><published>2021-09-04T00:00:00+03:00</published><updated>2021-09-04T00:00:00+03:00</updated><id>/flex-box-hacks</id><content type="html" xml:base="/flex-box-hacks">&lt;section class=&quot;wrapper&quot;&gt;
    &lt;h1 class=&quot;title&quot;&gt;Flexbox hacks&lt;/h1&gt;
    &lt;p class=&quot;author&quot;&gt;By Georgi Anastasov Sep 04, 2021&lt;/p&gt;
    &lt;br&gt;
    &lt;p&gt;The Germans broke my CSS a while ago. Well, not literally, but their long words did. A few days before the issue occurred, I saw a talk by Zoe Mickley Gillenwater at Frontend United entitled “Using Flexbox Today”. That talk inspired me to solve the problem with flexbox.&lt;/p&gt;
    &lt;br&gt;
    &lt;p&gt;Before I explain the flex-grow 9999 hack in detail, let me briefly describe what it does. The flex-grow 9999 hack makes a flex item behave like it has two flex grow values. It prevents a flex item in a row from growing, but allows it to grow if it’s wrapped into its own line. All without the use of media queries.&lt;/p&gt;
    &lt;br&gt;
    &lt;p&gt;If that didn’t make sense, don’t worry. The example should make it clear.&lt;/p&gt;
    &lt;br&gt;
    &lt;p&gt;Imagine a flex container (display: flex) with two flex items in a row (flex-direction: row). Item A on the left, and item B on the right. Item A can not grow, so I give it a flex-grow value of 0 (the default value). Item B has to take up all the remaining space in the container. This can be done with flex-grow: 1.&lt;/p&gt;
    &lt;br&gt;
    &lt;p&gt;I would like the flex items to be stacked on top of each other when necessary. Item B has to jump onto the second line, if there’s not enough space for it to be at least 20 ems wide. Adding flex-wrap: wrap to the container and flex-basis: 20em to item B does the job.&lt;/p&gt;
&lt;/section&gt;</content><author><name></name></author><summary type="html">Flexbox hacks By Georgi Anastasov Sep 04, 2021 The Germans broke my CSS a while ago. Well, not literally, but their long words did. A few days before the issue occurred, I saw a talk by Zoe Mickley Gillenwater at Frontend United entitled “Using Flexbox Today”. That talk inspired me to solve the problem with flexbox. Before I explain the flex-grow 9999 hack in detail, let me briefly describe what it does. The flex-grow 9999 hack makes a flex item behave like it has two flex grow values. It prevents a flex item in a row from growing, but allows it to grow if it’s wrapped into its own line. All without the use of media queries. If that didn’t make sense, don’t worry. The example should make it clear. Imagine a flex container (display: flex) with two flex items in a row (flex-direction: row). Item A on the left, and item B on the right. Item A can not grow, so I give it a flex-grow value of 0 (the default value). Item B has to take up all the remaining space in the container. This can be done with flex-grow: 1. I would like the flex items to be stacked on top of each other when necessary. Item B has to jump onto the second line, if there’s not enough space for it to be at least 20 ems wide. Adding flex-wrap: wrap to the container and flex-basis: 20em to item B does the job.</summary></entry></feed>